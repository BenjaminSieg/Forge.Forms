using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using Bindables;
using Forge.Forms.Annotations;
using Forge.Forms.Controls;
using Humanizer;
using MahApps.Metro.Controls;
using MaterialDesignThemes.Wpf;
using MoreLinq;
using Proxier.Extensions;

namespace Forge.Forms.Collections.Controls
{
    public class CrudControl : ContentControl
    {
        private const string ButtonCrudKey = "ButtonCrud";

        static CrudControl()
        {
            Application.Current.Resources.MergedDictionaries.Add(new ResourceDictionary
            {
                Source = new Uri("/Forge.Forms.Collections;component/Themes/Generic.xaml", UriKind.Relative)
            });
            ButtonCrudTemplate = Application.Current.TryFindResource(ButtonCrudKey) as DataTemplate;
        }

        private static DataTemplate ButtonCrudTemplate { get; }

        [DependencyProperty(Options = FrameworkPropertyMetadataOptions.BindsTwoWayByDefault,
            OnPropertyChanged = nameof(ItemsSourceChanged))]
        public object ItemsSource { get; set; }

        private CrudCollection Collection => ItemsSource as CrudCollection;

        private DataGrid DataGrid { get; } = new DataGrid();

        public ICommand AddItemCommand { get; set; }

        public ICommand EditItemCommand { get; set; }

        public ICommand RemoveItemCommand { get; set; }

        public CrudControl()
        {
            DefaultCommands();
            InitializeDataGrid();
            Content = DataGrid;
        }

        private void InitializeDataGrid()
        {
            DataGrid.AutoGenerateColumns = true;
            DataGrid.AutoGeneratingColumn += DataGridOnAutoGeneratingColumn;
            DataGrid.AutoGeneratedColumns += DataGridOnAutoGeneratedColumns;
            DataGrid.SetBinding(ItemsControl.ItemsSourceProperty, new Binding("ItemsSource")
            {
                Source = this
            });
        }

        private void DataGridOnAutoGeneratedColumns(object sender, EventArgs eventArgs)
        {
            DataGrid.Columns.Add(new DataGridTemplateColumn
            {
                CellTemplate = ButtonCrudTemplate,
                IsReadOnly = false
            });
        }

        private void DefaultCommands()
        {
            AddItemCommand = new RelayCommand(_ =>
            {
                var newItem = Activator.CreateInstance(Collection.First().GetType());
                Show.Dialog().For(newItem);
            });

            EditItemCommand = new RelayCommand(_ => { Show.Dialog().For(_); });

            RemoveItemCommand = new RelayCommand(_ =>
            {
                //TODO: Implement
            });
        }

        private void DataGridOnAutoGeneratingColumn(object o, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.PropertyDescriptor is PropertyDescriptor descriptor)
            {
                SetDatagridHeader(e, descriptor);
            }
        }

        private static void SetDatagridHeader(DataGridAutoGeneratingColumnEventArgs e,
            PropertyDescriptor propertyDescriptor)
        {
            var fieldAttribute = propertyDescriptor.Attributes.OfType<FieldAttribute>().FirstOrDefault();
            if (fieldAttribute != null)
            {
                e.Column.Header = fieldAttribute.Name;
                if (fieldAttribute.IsVisible is bool b)
                    e.Column.Visibility = b ? Visibility.Visible : Visibility.Collapsed;
            }

            e.Column.Header = (e.Column.Header as string ?? propertyDescriptor.Name).Humanize();
        }

        private static void ItemsSourceChanged(DependencyObject obj, DependencyPropertyChangedEventArgs args)
        {
            if (obj is CrudControl crudControl && crudControl.ItemsSource is IEnumerable enumerable &&
                !(crudControl.ItemsSource is CrudCollection))
            {
                var itemsList = new CrudCollection(enumerable.OfType<object>().Select(i =>
                {
                    i = i.CopyTo(i.GetType().InjectProperty(nameof(AddItemCommand), typeof(ICommand)));
                    i.GetType().GetProperty(nameof(AddItemCommand))?.SetValue(i, crudControl.AddItemCommand);
                    return i;
                }));
                var itemsTypes = itemsList.DistinctBy(i => i.GetType()).Select(i => i.GetType()).ToList();
                crudControl.ItemsSource = itemsList;
            }
        }
    }
}